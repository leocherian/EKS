AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EKSClusterName:
    Type: String
    Default: myapp-prod
    Description: The desired name of your AWS EKS Cluster.
  VPCID:
    Type: AWS::EC2::VPC::Id
    Default: vpc-123456789qwerty
    Description: VPC ID for the Cluster.
  Subnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The subnets where EKS will be created. Please select subnests in 2 different AZs
  ForceUpdateEnabled:
    Description: Option for force update of nodes.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 1
    Description: Desired capacity of Node Group ASG.
  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 1
    Description: Maximum size of Node Group ASG.
  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum size of Node Group ASG.
  NodeInstanceType:
    Type: String
    Default: r5.4xlarge
    Description: EC2 instance type for the node instances
  NodeVolumeSize:
    Type: Number
    Default: 128
    Description: Node volume size
  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.25/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.
  BootstrapArguments:
    Type: String
    Default: ""
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"
  NetworkCIDR:
    Type: "String"
    Description: "CIDR range from which you would connect to the EKS cluster for administration. Must be in CIDR form. Eg. 10.0.0.0/16"

Resources:
  EKSIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: !Sub
        - '${EKSClusterName}-role'
        - EKSClusterName: !Ref EKSClusterName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
 
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPCID
 
  ControlPlaneSecurityGroupFromoffice2Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: ControlPlaneSecurityGroup
    Properties:
      Description: Allow connection from office systems.
      CidrIp: !Ref NetworkCIDR
      FromPort: 0
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: "-1"
      ToPort: 65535
  
  CWLInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub
        - '${EKSClusterName}-CW-endpoint'
        - EKSClusterName: !Ref EKSClusterName
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcId: !Ref VPCID
      SubnetIds:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
      SecurityGroupIds:
        - !Ref NodeSecurityGroup
    DependsOn: [NodeSecurityGroup]
 
  ECRInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub
        - '${EKSClusterName}-ECR-endpoint'
        - EKSClusterName: !Ref EKSClusterName
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcId: !Ref VPCID
      SubnetIds:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
      SecurityGroupIds:
        - !Ref NodeSecurityGroup
    DependsOn: [NodeSecurityGroup]
 
  ECRDKRInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub
        - '${EKSClusterName}-ECRDKR-endpoint'
        - EKSClusterName: !Ref EKSClusterName
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcId: !Ref VPCID
      SubnetIds:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
      SecurityGroupIds:
        - !Ref NodeSecurityGroup
    DependsOn: [NodeSecurityGroup]
 
  EC2InterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub
        - '${EKSClusterName}-EC2-endpoint'
        - EKSClusterName: !Ref EKSClusterName
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      VpcId: !Ref VPCID
      SubnetIds:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
      SecurityGroupIds:
        - !Ref NodeSecurityGroup
    DependsOn: [NodeSecurityGroup]
 
  LBInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub
        - '${EKSClusterName}-LB-endpoint'
        - EKSClusterName: !Ref EKSClusterName
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.elasticloadbalancing'
      VpcId: !Ref VPCID
      SubnetIds:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
      SecurityGroupIds:
        - !Ref NodeSecurityGroup
    DependsOn: [NodeSecurityGroup]
 
  STSInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub
        - '${EKSClusterName}-STS-endpoint'
        - EKSClusterName: !Ref EKSClusterName
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sts'
      VpcId: !Ref VPCID
      SubnetIds:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
      SecurityGroupIds:
        - !Ref NodeSecurityGroup
    DependsOn: [NodeSecurityGroup]
 
  S3InterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub
        - '${EKSClusterName}-S3-endpoint'
        - EKSClusterName: !Ref EKSClusterName
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPCID
      SubnetIds:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
      SecurityGroupIds:
        - !Ref NodeSecurityGroup
    DependsOn: [NodeSecurityGroup]
 
  EKSInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub
        - '${EKSClusterName}-EKS-endpoint'
        - EKSClusterName: !Ref EKSClusterName
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.eks'
      VpcId: !Ref VPCID
      SubnetIds:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
      SecurityGroupIds:
        - !Ref NodeSecurityGroup
    DependsOn: [NodeSecurityGroup]
 
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Version: "1.25"
      Name: !Ref EKSClusterName
      RoleArn:
        "Fn::GetAtt": ["EKSIAMRole", "Arn"]
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Select [ 0, !Ref Subnets ]
          - !Select [ 1, !Ref Subnets ]
        EndpointPublicAccess: false
        EndpointPrivateAccess: true
    DependsOn: [EKSIAMRole, ControlPlaneSecurityGroup,CWLInterfaceEndpoint,EC2InterfaceEndpoint,ECRInterfaceEndpoint,ECRDKRInterfaceEndpoint,LBInterfaceEndpoint,STSInterfaceEndpoint,S3InterfaceEndpoint,EKSInterfaceEndpoint]
 
  EKSClusterNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: [EKSCluster,NodeLaunchTemplate]
    Properties:
      ClusterName: !Ref EKSClusterName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      LaunchTemplate:
        Name: !Sub
        - '${EKSClusterName}-launch-template-1.25'
        - EKSClusterName: !Ref EKSClusterName
      ScalingConfig:
        MinSize: !Ref NodeAutoScalingGroupMinSize
        DesiredSize: !Ref NodeAutoScalingGroupDesiredCapacity
        MaxSize: !Ref NodeAutoScalingGroupMaxSize
      Labels:
        myapp-kube-node-group: True
        app: !Ref EKSClusterName
      Subnets:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
      Tags: {"Name": "myapp-prod-NodeGroup"}
  
  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: [EKSCluster]
    Properties:
      LaunchTemplateName: !Sub
        - '${EKSClusterName}-launch-template-1.25'
        - EKSClusterName: !Ref EKSClusterName
      LaunchTemplateData:
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/xvda
        ImageId: !Ref NodeImageIdSSMParam
        InstanceType: !Ref NodeInstanceType
        SecurityGroupIds:
          - Ref: NodeSecurityGroup
        UserData: !Base64
          Fn::Sub:
            - |
              #!/bin/bash
              set -o xtrace
              B64_CLUSTER_CA= ${clusterca}
              API_SERVER_URL= ${clusterendpoint}
              K8S_CLUSTER_DNS_IP=172.20.0.10
              /etc/eks/bootstrap.sh ${clustername} --kubelet-extra-args '--node-labels=eks.amazonaws.com/nodegroup-image=ami-0db1d52047cb9771f,eks.amazonaws.com/capacityType=ON_DEMAND,eks.amazonaws.com/nodegroup=managed --max-pods=500' --b64-cluster-ca $B64_CLUSTER_CA --apiserver-endpoint $API_SERVER_URL --dns-cluster-ip $K8S_CLUSTER_DNS_IP --use-max-pods false
              /opt/aws/bin/cfn-signal --exit-code $? \
                      --stack  ${AWS::StackName} \
                      --resource NodeGroup  \
                      --region ${AWS::Region}
              sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              sudo systemctl enable amazon-ssm-agent
              sudo systemctl start amazon-ssm-agent
              aws s3 cp s3://office-myapp-eks/security-setup.sh /tmp
              /bin/chmod +x /tmp/security-setup.sh.sh
              /tmp/security-setup.sh.sh > /tmp/security-setup.out
            - clusterca: !GetAtt EKSCluster.CertificateAuthorityData
              clusterendpoint: !GetAtt EKSCluster.Endpoint
              clustername: !Ref EKSClusterName
 
  KubeProxyAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: kube-proxy
      AddonVersion: v1.25.6-eksbuild.2
      ClusterName: !Ref EKSClusterName
      ResolveConflicts: OVERWRITE
    DependsOn: [EKSCluster]
 
  CoreDNSAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: coredns
      AddonVersion: v1.9.3-eksbuild.2
      ClusterName: !Ref EKSClusterName
      ResolveConflicts: OVERWRITE
    DependsOn: [EKSCluster] 
  
  VPCCNIAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: vpc-cni
      AddonVersion: v1.12.5-eksbuild.2
      ClusterName: !Ref EKSClusterName
      ResolveConflicts: OVERWRITE
    DependsOn: [EKSCluster] 
  
  EBSCSIAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: aws-ebs-csi-driver
      AddonVersion: v1.19.0-eksbuild.2
      ClusterName: !Ref EKSClusterName
      ResolveConflicts: OVERWRITE
    DependsOn: [EKSCluster] 
   
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/AmazonEBSCSIDriverPolicy"
      Path: /
      Policies:
        - PolicyName: S3ReadPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'S3:GetObject'
                  - 'S3:ListBucket'
                Resource:
                  - 'arn:aws:s3:::office-myapp-eks'
                  - 'arn:aws:s3:::office-myapp-eks/*'
         
  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/${EKSClusterName}
          Value: owned
      VpcId: !Ref VPCID
 
  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535
 
  ClusterControlPlaneSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 443
 
  ControlPlaneEgressToNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 65535
 
  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443
  
  NodeSecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 65535
  
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 443
  
  NodeSecurityGroupFromoffice22Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow connection from office systems.
      CidrIp: !Ref NetworkCIDR
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      ToPort: 65535
       
 
